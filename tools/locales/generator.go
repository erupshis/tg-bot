package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"

	"gopkg.in/yaml.v3"
)

type Locale struct {
	Errors   map[string]interface{} `yaml:"errors"`
	Messages map[string]interface{} `yaml:"messages"`
}

func main() {
	data, err := ioutil.ReadFile("locales/ru.yaml")
	if err != nil {
		log.Fatalf("error reading locale file: %v", err)
	}

	var locale Locale
	if err := yaml.Unmarshal(data, &locale); err != nil {
		log.Fatalf("error parsing YAML: %v", err)
	}

	generateCode(locale)
}

func toTitle(s string) string {
	s = strings.ReplaceAll(s, "_", " ")
	s = strings.Title(s)
	return strings.ReplaceAll(s, " ", "")
}

func generateStruct(path string, data map[string]interface{}) (string, string) {
	var defBuilder strings.Builder
	var initBuilder strings.Builder

	defBuilder.WriteString("struct {\n")
	initBuilder.WriteString("{\n")

	for key, value := range data {
		fieldName := toTitle(key)
		fullPath := path + "." + key

		switch v := value.(type) {
		case map[string]interface{}:
			subDef, subInit := generateStruct(fullPath, v)
			defBuilder.WriteString(fmt.Sprintf("\t%s %s\n", fieldName, subDef))
			initBuilder.WriteString(fmt.Sprintf("\t%s: %s%s,\n", fieldName, subDef, subInit))
		default:
			defBuilder.WriteString(fmt.Sprintf("\t%s MessageKey\n", fieldName))
			initBuilder.WriteString(fmt.Sprintf("\t%s: \"%s\",\n", fieldName, fullPath))
		}
	}

	defBuilder.WriteString("}")
	initBuilder.WriteString("}")

	return defBuilder.String(), initBuilder.String()
}

func generateCode(locale Locale) {
	const tmpl = `// Code generated by locgen. DO NOT EDIT.

package locales

type MessageKey string

var (
	Errors = {{.ErrorsDef}} {{.ErrorsInit}}

	Messages = {{.MessagesDef}} {{.MessagesInit}}
)
`

	errorsDef, errorsInit := generateStruct("errors", locale.Errors)
	messagesDef, messagesInit := generateStruct("messages", locale.Messages)

	data := struct {
		ErrorsDef    string
		ErrorsInit   string
		MessagesDef  string
		MessagesInit string
	}{
		ErrorsDef:    errorsDef,
		ErrorsInit:   errorsInit,
		MessagesDef:  messagesDef,
		MessagesInit: messagesInit,
	}

	t := template.Must(template.New("locales").Parse(tmpl))

	outputFile, err := os.Create("./locales/locales.go")
	if err != nil {
		log.Fatal(err)
	}
	defer outputFile.Close()

	if err := t.Execute(outputFile, data); err != nil {
		log.Fatal(err)
	}

	fmt.Println("Successfully generated locales.go")
}
